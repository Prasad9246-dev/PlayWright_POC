{"name": "TEST-33154 To verify the name of property -Attribution on stack pay order is changed", "status": "failed", "statusDetails": {"message": "AssertionError: Could not click 'Yes' button for Require Player Verification: failed assertion\nassert False", "trace": "setup = <Page url='https://wdts-gateway-aut02.wdts.local:796/configuration/business-rules'>, request = <FixtureRequest for <Function test_33154>>\n\n    @allure.feature(\"Bet Allocation Logic\")\n    @allure.story(\"TEST-33154: Bet Allocation Logic\")\n    @allure.title(\"TEST-33154 To verify the name of property -Attribution on stack pay order is changed\")\n    def test_33154(setup,request):\n        # Initialize base test and get required data\n        ppb = PPExecutionTemplate(setup, \"TEST-33154\")\n        ppb.configuration_login.navigate_to_configuration(\"Configuration\")\n        request.node.ppb = ppb\n    \n        # Use setup (the Page object) for UI actions\n        page = setup\n    \n        # Step 2: Click Business Rules tab\n        page.get_by_role(\"tab\", name=\"Business Rules\").click()\n        time.sleep(5)\n    \n        # Step 3: Click Create button if it exists\n        print(\"Step 3: Checking for 'Create' button...\")\n        try:\n            create_button = page.get_by_role(\"button\", name=\"Create\", exact=True)\n            if create_button.is_visible():\n                print(\"'Create' button is visible. Clicking...\")\n                create_button.click()\n                time.sleep(5)\n            else:\n                print(\"'Create' button is not visible. Skipping click.\")\n        except Exception as e:\n            print(f\"Exception while clicking 'Create' button: {e}\")\n            # Fallback: Try clicking directly as per recorded step\n            print(\"Trying direct click using recorded step...\")\n            try:\n                page.get_by_role(\"button\", name=\"Create\", exact=True).click()\n                print(\"Clicked 'Create' button using recorded step.\")\n                time.sleep(5)\n            except Exception as ex:\n                print(f\"Failed to click 'Create' button: {ex}\")\n    \n        # Step 4: Click and assert Bet Attribution tab\n        try:\n            bet_attr_tab = page.get_by_text(\"Bet Attribution\")\n            if bet_attr_tab.is_visible():\n                bet_attr_tab.click()\n                print(\"Bet Attribution tab is visible and clicked: successful assertion\")\n                assert True, \"Bet Attribution tab is visible and clickable: successful assertion\"\n            else:\n                print(\"Bet Attribution tab is not visible: failed assertion\")\n                assert False, \"Bet Attribution tab is not visible: failed assertion\"\n        except Exception as e:\n            print(f\"Exception while clicking 'Bet Attribution' tab: {e}\")\n            assert False, \"Bet Attribution tab is not clickable: failed assertion\"\n    \n        # Step 5: Click and assert Display chip owner on game\n        try:\n            display_chip_owner = page.get_by_text(\"Display chip owner on game\")\n            if display_chip_owner.is_visible():\n                display_chip_owner.click()\n                print(\"Display chip owner on game is visible and clicked: successful assertion\")\n                assert True, \"Display chip owner on game is visible and clickable: successful assertion\"\n            else:\n                print(\"Display chip owner on game is not visible: failed assertion\")\n                assert False, \"Display chip owner on game is not visible: failed assertion\"\n        except Exception as e:\n            print(f\"Exception while clicking 'Display chip owner on game': {e}\")\n            assert False, \"Display chip owner on game is not clickable: failed assertion\"\n    \n        # Step 5b: Assert Display chip owner on game should NOT be visible\n        try:\n            display_chip_owner = page.get_by_text(\"Display chip owner on game\")\n            if not display_chip_owner.is_visible():\n                print(\"Display chip owner on game is NOT visible: successful assertion\")\n                assert True, \"Display chip owner on game is not visible: successful assertion\"\n            else:\n                print(\"Display chip owner on game IS visible: failed assertion\")\n                assert False, \"Display chip owner on game is visible: failed assertion\"\n        except Exception as e:\n            print(f\"Exception while checking visibility of 'Display chip owner on game': {e}\")\n            assert True, \"Display chip owner on game is not visible (exception handled): successful assertion\"\n    \n        # Step 6: Click and assert Require Player Verification\n        try:\n            require_verification = page.get_by_text(\"Require Player Verification\")\n            if require_verification.is_visible():\n                print(\"Require Player Verification is visible: successful assertion\")\n                assert True, \"Require Player Verification is visible: successful assertion\"\n            else:\n                print(\"Require Player Verification is not visible: failed assertion\")\n                assert False, \"Require Player Verification is not visible: failed assertion\"\n        except Exception as e:\n            print(f\"Exception while checking 'Require Player Verification': {e}\")\n            assert False, \"Require Player Verification is not visible: failed assertion\"\n    \n        # Step 7: Click Yes button for Require Player Verification\n        try:\n            yes_button = page.locator(\"#mat-button-toggle-142-button\")\n>           yes_button.click()\n\nTestCases\\BaccaratGamePlay\\BGP_BetAllocationLogic\\test_TEST-33157.py:100: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:15524: in click\n    self._sync(\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_locator.py:160: in click\n    return await self._frame.click(self._selector, strict=True, **params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:549: in click\n    await self._channel.send(\"click\", self._timeout, locals_to_params(locals()))\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:69: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x0000024877983380>\ncb = <function Channel.send.<locals>.<lambda> at 0x00000248778022A0>, is_internal = False, title = None\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(\n            task, \"__pw_stack__\", None\n        ) or inspect.stack(0)\n    \n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.click: Timeout 30000ms exceeded.\nE           Call log:\nE             - waiting for locator(\"#mat-button-toggle-142-button\")\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:558: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nsetup = <Page url='https://wdts-gateway-aut02.wdts.local:796/configuration/business-rules'>, request = <FixtureRequest for <Function test_33154>>\n\n    @allure.feature(\"Bet Allocation Logic\")\n    @allure.story(\"TEST-33154: Bet Allocation Logic\")\n    @allure.title(\"TEST-33154 To verify the name of property -Attribution on stack pay order is changed\")\n    def test_33154(setup,request):\n        # Initialize base test and get required data\n        ppb = PPExecutionTemplate(setup, \"TEST-33154\")\n        ppb.configuration_login.navigate_to_configuration(\"Configuration\")\n        request.node.ppb = ppb\n    \n        # Use setup (the Page object) for UI actions\n        page = setup\n    \n        # Step 2: Click Business Rules tab\n        page.get_by_role(\"tab\", name=\"Business Rules\").click()\n        time.sleep(5)\n    \n        # Step 3: Click Create button if it exists\n        print(\"Step 3: Checking for 'Create' button...\")\n        try:\n            create_button = page.get_by_role(\"button\", name=\"Create\", exact=True)\n            if create_button.is_visible():\n                print(\"'Create' button is visible. Clicking...\")\n                create_button.click()\n                time.sleep(5)\n            else:\n                print(\"'Create' button is not visible. Skipping click.\")\n        except Exception as e:\n            print(f\"Exception while clicking 'Create' button: {e}\")\n            # Fallback: Try clicking directly as per recorded step\n            print(\"Trying direct click using recorded step...\")\n            try:\n                page.get_by_role(\"button\", name=\"Create\", exact=True).click()\n                print(\"Clicked 'Create' button using recorded step.\")\n                time.sleep(5)\n            except Exception as ex:\n                print(f\"Failed to click 'Create' button: {ex}\")\n    \n        # Step 4: Click and assert Bet Attribution tab\n        try:\n            bet_attr_tab = page.get_by_text(\"Bet Attribution\")\n            if bet_attr_tab.is_visible():\n                bet_attr_tab.click()\n                print(\"Bet Attribution tab is visible and clicked: successful assertion\")\n                assert True, \"Bet Attribution tab is visible and clickable: successful assertion\"\n            else:\n                print(\"Bet Attribution tab is not visible: failed assertion\")\n                assert False, \"Bet Attribution tab is not visible: failed assertion\"\n        except Exception as e:\n            print(f\"Exception while clicking 'Bet Attribution' tab: {e}\")\n            assert False, \"Bet Attribution tab is not clickable: failed assertion\"\n    \n        # Step 5: Click and assert Display chip owner on game\n        try:\n            display_chip_owner = page.get_by_text(\"Display chip owner on game\")\n            if display_chip_owner.is_visible():\n                display_chip_owner.click()\n                print(\"Display chip owner on game is visible and clicked: successful assertion\")\n                assert True, \"Display chip owner on game is visible and clickable: successful assertion\"\n            else:\n                print(\"Display chip owner on game is not visible: failed assertion\")\n                assert False, \"Display chip owner on game is not visible: failed assertion\"\n        except Exception as e:\n            print(f\"Exception while clicking 'Display chip owner on game': {e}\")\n            assert False, \"Display chip owner on game is not clickable: failed assertion\"\n    \n        # Step 5b: Assert Display chip owner on game should NOT be visible\n        try:\n            display_chip_owner = page.get_by_text(\"Display chip owner on game\")\n            if not display_chip_owner.is_visible():\n                print(\"Display chip owner on game is NOT visible: successful assertion\")\n                assert True, \"Display chip owner on game is not visible: successful assertion\"\n            else:\n                print(\"Display chip owner on game IS visible: failed assertion\")\n                assert False, \"Display chip owner on game is visible: failed assertion\"\n        except Exception as e:\n            print(f\"Exception while checking visibility of 'Display chip owner on game': {e}\")\n            assert True, \"Display chip owner on game is not visible (exception handled): successful assertion\"\n    \n        # Step 6: Click and assert Require Player Verification\n        try:\n            require_verification = page.get_by_text(\"Require Player Verification\")\n            if require_verification.is_visible():\n                print(\"Require Player Verification is visible: successful assertion\")\n                assert True, \"Require Player Verification is visible: successful assertion\"\n            else:\n                print(\"Require Player Verification is not visible: failed assertion\")\n                assert False, \"Require Player Verification is not visible: failed assertion\"\n        except Exception as e:\n            print(f\"Exception while checking 'Require Player Verification': {e}\")\n            assert False, \"Require Player Verification is not visible: failed assertion\"\n    \n        # Step 7: Click Yes button for Require Player Verification\n        try:\n            yes_button = page.locator(\"#mat-button-toggle-142-button\")\n            yes_button.click()\n            print(\"Clicked 'Yes' button for Require Player Verification: successful assertion\")\n            assert True, \"Clicked 'Yes' button for Require Player Verification: successful assertion\"\n        except Exception as e:\n            print(f\"Exception while clicking 'Yes' button: {e}\")\n>           assert False, \"Could not click 'Yes' button for Require Player Verification: failed assertion\"\nE           AssertionError: Could not click 'Yes' button for Require Player Verification: failed assertion\nE           assert False\n\nTestCases\\BaccaratGamePlay\\BGP_BetAllocationLogic\\test_TEST-33157.py:105: AssertionError"}, "start": 1756723666484, "stop": 1756723715512, "uuid": "d989d71f-619e-444c-b69a-13edf696f3cb", "historyId": "ba4603d761fc26b9395e75443ef2d831", "testCaseId": "ba4603d761fc26b9395e75443ef2d831", "fullName": "TestCases.BaccaratGamePlay.BGP_BetAllocationLogic.test_TEST-33157#test_33154", "labels": [{"name": "story", "value": "TEST-33154: Bet Allocation Logic"}, {"name": "feature", "value": "Bet Allocation Logic"}, {"name": "parentSuite", "value": "TestCases.BaccaratGamePlay.BGP_BetAllocationLogic"}, {"name": "suite", "value": "test_TEST-33157"}, {"name": "host", "value": "CC-LT001020"}, {"name": "thread", "value": "19332-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.BaccaratGamePlay.BGP_BetAllocationLogic.test_TEST-33157"}], "titlePath": ["TestCases", "BaccaratGamePlay", "BGP_BetAllocationLogic", "test_TEST-33157.py"]}