{"name": "TEST-33163 To verify the ownership of chips when player places more than one stack on a single seat", "status": "failed", "statusDetails": {"message": "AssertionError: Anonymous is not available on screen: failed assertion\nassert False", "trace": "setup = <Page url='https://172.41.46.23:790/tabledashboard/2025-09-08/view-table'>\nrequest = <FixtureRequest for <Function test_33163>>\n\n    @allure.feature(\"Bet Allocation Logic\")\n    @allure.story(\"TEST-33163: Bet Allocation Logic\")\n    @allure.title(\"TEST-33163 To verify the ownership of chips when player places more than one stack on a single seat\")\n    def test_33163(setup, request):\n        status = \"Pass\"\n        remarks = \"\"\n        tbd = TableExecutionTemplate(setup, \"TEST-33163\",\"BGP_BetAllocationLogic\")\n        request.node.tbd = tbd\n        try:\n            table_ip = tbd.config[\"tableIP\"]\n            chips_df = tbd.chips_df\n            #Player clocked-in\n            tbd.table_actions.clock_in_player(\"Players_TAB\",\"1\", \"6013\")\n            time.sleep(2)\n            tbd.table_actions.navigate_to_tab(tbd.view_table_tab.view_table_tab_selector)\n            chip_id = tbd.table_actions.get_chip_ids_for_denom(chips_df,100)\n            # # Process buy-ins\n            # tbd.logger_utils.log(\"Processing buy-ins.\")\n            # chip_id = tbd.table_actions.get_chip_ids_for_denom(chips_df,100)\n    \n            # Convert chip_id list to string\n            chip_id_str = \",\".join(str(x) for x in chip_id)\n    \n            # Process wagers\n            tbd.logger_utils.log(\"Processing wagers.\")\n            tbd.table_actions.move_chips_between_antennas(table_ip, \"TT\", \"P1\", chip_id_str)\n    \n            # Draw cards and press shoe button\n            tbd.logger_utils.log(\"Drawing cards and pressing shoe.\")\n            tbd.card_processor.draw_cards_and_shoe_press(tbd.card_data, table_ip)\n    \n            # Process payouts\n            tbd.logger_utils.log(\"Processing payouts.\")\n            chip_id = tbd.table_actions.get_chip_ids_for_denom(chips_df,100)\n    \n            # Convert chip_id list to string\n            chip_id_str = \",\".join(str(x) for x in chip_id)\n    \n            tbd.payout_processor.process_payouts(table_ip, tbd.payout_data, chips_df)\n            time.sleep(5)\n    \n            tbd.table_actions.move_chips_between_antennas(table_ip, \"TT\", \"P1\", chip_id_str)\n    \n            # After payout code\n            tbd.logger_utils.log(\"Navigating to Sessions tab.\")\n            setup.get_by_role(\"tab\", name=\"Sessions\").click()\n            tbd.logger_utils.log(\"Clicked Sessions tab.\")\n    \n            tbd.logger_utils.log(\"Checking for any cell containing 'Anonymous'.\")\n            anonymous_cells = setup.locator(\"[role='cell']\")\n            found_anonymous = False\n            for i in range(anonymous_cells.count()):\n                cell_text = anonymous_cells.nth(i).inner_text().strip()\n                if \"Anonymous\" in cell_text:\n                    found_anonymous = True\n                    break\n            if found_anonymous:\n                print(\"Anonymous is available on screen: successful assertion\")\n                tbd.logger_utils.log(\"Anonymous is available on screen: successful assertion\")\n                assert True, \"Anonymous is available on screen: successful assertion\"\n            else:\n                print(\"Anonymous is not available on screen: failed assertion\")\n                tbd.logger_utils.log(\"Anonymous is not available on screen: failed assertion\")\n>               assert False, \"Anonymous is not available on screen: failed assertion\"\nE               AssertionError: Anonymous is not available on screen: failed assertion\nE               assert False\n\nTestCases\\BaccaratGamePlay\\BGP_BetAllocationLogic\\test_TEST-33163.py:70: AssertionError"}, "start": 1757307050173, "stop": 1757307169367, "uuid": "9a6c1139-79ed-46bf-928a-238be80af000", "historyId": "53b580944f49a78e833b34249ddd5a25", "testCaseId": "53b580944f49a78e833b34249ddd5a25", "fullName": "TestCases.BaccaratGamePlay.BGP_BetAllocationLogic.test_TEST-33163#test_33163", "labels": [{"name": "story", "value": "TEST-33163: Bet Allocation Logic"}, {"name": "feature", "value": "Bet Allocation Logic"}, {"name": "parentSuite", "value": "TestCases.BaccaratGamePlay.BGP_BetAllocationLogic"}, {"name": "suite", "value": "test_TEST-33163"}, {"name": "host", "value": "CC-LT001020"}, {"name": "thread", "value": "2584-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.BaccaratGamePlay.BGP_BetAllocationLogic.test_TEST-33163"}], "titlePath": ["TestCases", "BaccaratGamePlay", "BGP_BetAllocationLogic", "test_TEST-33163.py"]}