{"name": "TEST-33165 This test case is to verify the bet attribution when known player places bet on position where anonymous session is already created.", "status": "failed", "statusDetails": {"message": "AssertionError: Player link (6001) is not visible: failed assertion\nassert False", "trace": "setup = <Page url='https://172.41.46.23:790/tabledashboard/2025-09-08/override'>\nrequest = <FixtureRequest for <Function test_33165>>\n\n    @allure.feature(\"Bet Allocation Logic\")\n    @allure.story(\"TEST-33165: Bet Allocation Logic\")\n    @allure.title(\"TEST-33165 This test case is to verify the bet attribution when known player places bet on position where anonymous session is already created.\")\n    def test_33165(setup, request):\n        status = \"Pass\"\n        remarks = \"\"\n        tbd = TableExecutionTemplate(setup, \"TEST-33165\",\"BGP_BetAllocationLogic\")\n        request.node.tbd = tbd\n        try:\n            table_ip = tbd.config[\"tableIP\"]\n            chips_df = tbd.chips_df\n    \n            tbd.table_actions.navigate_to_tab(tbd.view_table_tab.view_table_tab_selector)\n            chip_id = tbd.table_actions.get_chip_ids_for_denom(chips_df,100)\n            # # Process buy-ins\n            # tbd.logger_utils.log(\"Processing buy-ins.\")\n            # chip_id = tbd.table_actions.get_chip_ids_for_denom(chips_df,100)\n    \n            # Convert chip_id list to string\n            chip_id_str = \",\".join(str(x) for x in chip_id)\n    \n            # Process wagers\n            tbd.logger_utils.log(\"Processing wagers.\")\n            tbd.table_actions.move_chips_between_antennas(table_ip, \"TT\", \"P1\", chip_id_str)\n    \n            # Draw cards and press shoe button\n            tbd.logger_utils.log(\"Drawing cards and pressing shoe.\")\n            tbd.card_processor.draw_cards_and_shoe_press(tbd.card_data, table_ip)\n    \n            # Process payouts\n            tbd.logger_utils.log(\"Processing payouts.\")\n            chip_id = tbd.table_actions.get_chip_ids_for_denom(chips_df,100)\n    \n            # Convert chip_id list to string\n            chip_id_str = \",\".join(str(x) for x in chip_id)\n    \n            tbd.table_actions.move_chips_between_antennas(table_ip, \"TT\", \"P1\", chip_id_str)\n    \n            # Process buy-ins - Game 2 Known Session\n            tbd.logger_utils.log(\"Processing buy-ins.\")\n            buyin_result = tbd.buyin_processor.process_buyins(table_ip, tbd.buyin_data, chips_df)\n    \n            # Process wagers\n            tbd.logger_utils.log(\"Processing wagers.\")\n            wager_result = tbd.wager_processor.process_wagers(table_ip, buyin_result, tbd.wager_data)\n    \n            # Draw cards and press shoe button\n            tbd.logger_utils.log(\"Drawing cards and pressing shoe.\")\n            tbd.card_processor.draw_cards_and_shoe_press(tbd.card_data, table_ip)\n    \n            # Process payouts\n            tbd.logger_utils.log(\"Processing payouts.\")\n            tbd.payout_processor.process_payouts(table_ip, tbd.payout_data, chips_df)\n            tbd.take_bets_processor.take(table_ip,wager_result,tbd.take_bets_data)\n            time.sleep(5)\n    \n            # Move to players tab for verification\n            tbd.logger_utils.log(\"Navigating to Players tab for verification.\")\n            tbd.table_actions.navigate_to_tab(tbd.player_tab.Players_TAB)\n            # Verification of Player Tab Card\n            tbd.logger_utils.log(\"Verifying if player link (6001) is visible on Player Tab Card.\")\n            player_link = setup.get_by_role(\"link\", name=\"(6001)\")\n            if player_link.is_visible():\n                print(\"Player link (6001) is visible and clicked: successful assertion\")\n                tbd.logger_utils.log(\"Player link (6001) is visible and clicked: successful assertion\")\n                assert True, \"Player link (6001) is visible and clickable: successful assertion\"\n            else:\n                print(\"Player link (6001) is not visible: failed assertion\")\n                tbd.logger_utils.log(\"Player link (6001) is not visible: failed assertion\")\n>               assert False, \"Player link (6001) is not visible: failed assertion\"\nE               AssertionError: Player link (6001) is not visible: failed assertion\nE               assert False\n\nTestCases\\BaccaratGamePlay\\BGP_BetAllocationLogic\\test_TEST-33165.py:76: AssertionError"}, "start": 1757331780232, "stop": 1757331915360, "uuid": "daca30ab-92a5-4334-ba98-bf6c4124fba2", "historyId": "19d31c610db485702556d6671ab5eca4", "testCaseId": "19d31c610db485702556d6671ab5eca4", "fullName": "TestCases.BaccaratGamePlay.BGP_BetAllocationLogic.test_TEST-33165#test_33165", "labels": [{"name": "story", "value": "TEST-33165: Bet Allocation Logic"}, {"name": "feature", "value": "Bet Allocation Logic"}, {"name": "parentSuite", "value": "TestCases.BaccaratGamePlay.BGP_BetAllocationLogic"}, {"name": "suite", "value": "test_TEST-33165"}, {"name": "host", "value": "CC-LT001020"}, {"name": "thread", "value": "4600-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.BaccaratGamePlay.BGP_BetAllocationLogic.test_TEST-33165"}], "titlePath": ["TestCases", "BaccaratGamePlay", "BGP_BetAllocationLogic", "test_TEST-33165.py"]}