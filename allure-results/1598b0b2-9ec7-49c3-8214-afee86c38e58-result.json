{"name": "TEST-33164 To verify the ownership of chips when player places more than one stack on a single seat", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.Error: Locator.is_visible: Error: strict mode violation: get_by_text(\"Table is closed\") resolved to 2 elements:\n    1) <span _ngcontent-ng-c2644081485=\"\">Table is closed</span> aka locator(\"app-dealer-closed\").get_by_text(\"Table is closed\")\n    2) <span _ngcontent-ng-c2230496970=\"\">Table is closed</span> aka get_by_text(\"Table is closed\").nth(1)\n\nCall log:\n    - checking visibility of get_by_text(\"Table is closed\")", "trace": "setup = <Page url='https://172.41.46.23:790/tabledashboard/2025-09-08/view-table/close'>\nrequest = <FixtureRequest for <Function test_33164>>\n\n    @allure.feature(\"Bet Allocation Logic\")\n    @allure.story(\"TEST-33164: Bet Allocation Logic\")\n    @allure.title(\"TEST-33164 To verify the ownership of chips when player places more than one stack on a single seat\")\n    def test_33164(setup, request):\n        status = \"Pass\"\n        remarks = \"\"\n>       tbd = TableExecutionTemplate(setup, \"TEST-33164\",\"BGP_BetAllocationLogic\")\n              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTestCases\\BaccaratGamePlay\\BGP_BetAllocationLogic\\test_TEST-33164.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nExecutionTemplates\\TableExecutionTemplate.py:31: in __init__\n    self._run_base_setup()\nExecutionTemplates\\TableExecutionTemplate.py:82: in _run_base_setup\n    self.table_actions.table_close_and_open()\nUtilites\\TableUtils\\TableActions.py:85: in table_close_and_open\n    self.table_open()\nUtilites\\TableUtils\\TableActions.py:64: in table_open\n    if self.page.get_by_text(\"Table is closed\").is_visible():\n       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:17179: in is_visible\n    self._sync(self._impl_obj.is_visible(timeout=timeout))\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_locator.py:513: in is_visible\n    return await self._frame.is_visible(\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:408: in is_visible\n    return await self._channel.send(\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:69: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Connection object at 0x0000021E3D7B7B60>\ncb = <function Channel.send.<locals>.<lambda> at 0x0000021E3DC70E00>\nis_internal = False, title = None\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(\n            task, \"__pw_stack__\", None\n        ) or inspect.stack(0)\n    \n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.Error: Locator.is_visible: Error: strict mode violation: get_by_text(\"Table is closed\") resolved to 2 elements:\nE               1) <span _ngcontent-ng-c2644081485=\"\">Table is closed</span> aka locator(\"app-dealer-closed\").get_by_text(\"Table is closed\")\nE               2) <span _ngcontent-ng-c2230496970=\"\">Table is closed</span> aka get_by_text(\"Table is closed\").nth(1)\nE           \nE           Call log:\nE               - checking visibility of get_by_text(\"Table is closed\")\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:558: Error"}, "start": 1757322235734, "stop": 1757322263872, "uuid": "9f325457-c068-433c-996c-2dcb5d65305f", "historyId": "76c47bb2de8feb0a15a1d6414b31295d", "testCaseId": "76c47bb2de8feb0a15a1d6414b31295d", "fullName": "TestCases.BaccaratGamePlay.BGP_BetAllocationLogic.test_TEST-33164#test_33164", "labels": [{"name": "story", "value": "TEST-33164: Bet Allocation Logic"}, {"name": "feature", "value": "Bet Allocation Logic"}, {"name": "parentSuite", "value": "TestCases.BaccaratGamePlay.BGP_BetAllocationLogic"}, {"name": "suite", "value": "test_TEST-33164"}, {"name": "host", "value": "CC-LT001020"}, {"name": "thread", "value": "15936-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.BaccaratGamePlay.BGP_BetAllocationLogic.test_TEST-33164"}], "titlePath": ["TestCases", "BaccaratGamePlay", "BGP_BetAllocationLogic", "test_TEST-33164.py"]}