{"name": "TEST-33161 To verify the ownership of chips when player places more than one stack on a single seat", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.Error: Locator.evaluate: Error: strict mode violation: locator(\"table[role=\\\"table\\\"]\") resolved to 3 elements:\n    1) <table matsort=\"\" mat-table=\"\" role=\"table\" multitemplatedatarows=\"\" _ngcontent-ng-c531113084=\"\" class=\"mat-mdc-table mdc-data-table__table cdk-table mat-sort w-100 ng-tns-c531113084-55 ng-star-inserted\">…</table> aka get_by_role(\"table\").filter(has_text=\"Game IDShoe ID import_export\")\n    2) <table mat-table=\"\" role=\"table\" _ngcontent-ng-c4229163689=\"\" class=\"mat-mdc-table mdc-data-table__table cdk-table mat-elevation-z1 table-dash__table-grid ng-star-inserted\">…</table> aka get_by_role(\"cell\", name=\"Position Player Bet Type Bets\").get_by_role(\"table\")\n    3) <table mat-table=\"\" role=\"table\" _ngcontent-ng-c4229163689=\"\" class=\"mat-mdc-table mdc-data-table__table cdk-table mat-elevation-z1 table-dash__table-grid ng-star-inserted\">…</table> aka get_by_text(\"Position Player Bet Type Bets Chip Set Casino W/L1Singh, Santy (6002) P (1:1) 1\").nth(1)\n\nCall log:\n  - waiting for locator(\"table[role=\\\"table\\\"]\")", "trace": "setup = <Page url='https://172.41.46.23:790/tabledashboard/2025-09-05/override'>\nrequest = <FixtureRequest for <Function test_33161>>\n\n    @allure.feature(\"Bet Allocation Logic\")\n    @allure.story(\"TEST-33161: Bet Allocation Logic\")\n    @allure.title(\"TEST-33161 To verify the ownership of chips when player places more than one stack on a single seat\")\n    def test_33161(setup, request):\n        status = \"Pass\"\n        remarks = \"\"\n        tbd = TableExecutionTemplate(setup, \"TEST-33161\",\"BGP_BetAllocationLogic\")\n        request.node.tbd = tbd\n        try:\n            table_ip = tbd.config[\"tableIP\"]\n            chips_df = tbd.chips_df\n    \n            # Process buy-ins\n            tbd.logger_utils.log(\"Processing buy-ins.\")\n            buyin_result = tbd.buyin_processor.process_buyins(table_ip, tbd.buyin_data, chips_df)\n    \n            # Process wagers\n            tbd.logger_utils.log(\"Processing wagers.\")\n            wager_result = tbd.wager_processor.process_wagers(table_ip, buyin_result, tbd.wager_data)\n    \n            # Draw cards and press shoe button\n            tbd.logger_utils.log(\"Drawing cards and pressing shoe.\")\n            tbd.card_processor.draw_cards_and_shoe_press(tbd.card_data, table_ip)\n    \n            # Process payouts\n            tbd.logger_utils.log(\"Processing payouts.\")\n            tbd.payout_processor.process_payouts(table_ip, tbd.payout_data, chips_df)\n            time.sleep(5)\n    \n            # Verification step (optional, add if needed)\n            tbd.logger_utils.log(\"Navigating to Games tab for verification.\")\n            tbd.table_actions.navigate_to_tab(tbd.games_tab.GAMES_TAB)\n    \n            # Step: Click the first row, first column cell in the table\n            tbd.logger_utils.log(\"Clicking the first row, first column cell in the table.\")\n            first_row_first_column = setup.locator(\"table[role='table'] tbody tr:first-child td:first-child\")\n            first_row_first_column.click()\n            tbd.logger_utils.log(\"Clicked the first row, first column cell.\")\n    \n            # Step: Extract dynamic table into JSON (like DataTable)\n            tbd.logger_utils.log(\"Extracting table data as JSON.\")\n            print(\"Extracting table data...\")\n>           table_data = setup.locator('table[role=\"table\"]').evaluate(\n                '''(table) => {\n                    const headers = Array.from(table.querySelectorAll('thead th')).map(th => th.textContent?.trim() || '');\n                    const rows = Array.from(table.querySelectorAll('tbody tr')).map(row => {\n                        const cells = Array.from(row.querySelectorAll('td')).map(td => td.textContent?.trim() || '');\n                        return headers.reduce((acc, header, i) => {\n                            acc[header] = cells[i] || '';\n                            return acc;\n                        }, {});\n                    });\n                    return rows;\n                }'''\n            )\n\nTestCases\\BaccaratGamePlay\\BGP_BetAllocationLogic\\test_TEST-33161.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:15724: in evaluate\n    self._sync(\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_locator.py:188: in evaluate\n    return await self._with_element(\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_locator.py:112: in _with_element\n    handle = await self.element_handle(timeout=timeout)\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_locator.py:316: in element_handle\n    handle = await self._frame.wait_for_selector(\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:369: in wait_for_selector\n    await self._channel.send(\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:69: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x0000019E17673B60>\ncb = <function Channel.send.<locals>.<lambda> at 0x0000019E17C47CE0>, is_internal = False\ntitle = None\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(\n            task, \"__pw_stack__\", None\n        ) or inspect.stack(0)\n    \n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.Error: Locator.evaluate: Error: strict mode violation: locator(\"table[role=\\\"table\\\"]\") resolved to 3 elements:\nE               1) <table matsort=\"\" mat-table=\"\" role=\"table\" multitemplatedatarows=\"\" _ngcontent-ng-c531113084=\"\" class=\"mat-mdc-table mdc-data-table__table cdk-table mat-sort w-100 ng-tns-c531113084-55 ng-star-inserted\">…</table> aka get_by_role(\"table\").filter(has_text=\"Game IDShoe ID import_export\")\nE               2) <table mat-table=\"\" role=\"table\" _ngcontent-ng-c4229163689=\"\" class=\"mat-mdc-table mdc-data-table__table cdk-table mat-elevation-z1 table-dash__table-grid ng-star-inserted\">…</table> aka get_by_role(\"cell\", name=\"Position Player Bet Type Bets\").get_by_role(\"table\")\nE               3) <table mat-table=\"\" role=\"table\" _ngcontent-ng-c4229163689=\"\" class=\"mat-mdc-table mdc-data-table__table cdk-table mat-elevation-z1 table-dash__table-grid ng-star-inserted\">…</table> aka get_by_text(\"Position Player Bet Type Bets Chip Set Casino W/L1Singh, Santy (6002) P (1:1) 1\").nth(1)\nE           \nE           Call log:\nE             - waiting for locator(\"table[role=\\\"table\\\"]\")\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:558: Error"}, "start": 1757047541567, "stop": 1757047630648, "uuid": "295d46ef-aed7-4a5a-84f6-0c567cbe08a0", "historyId": "b7ef0a10671c9566ef23f329fb1f4172", "testCaseId": "b7ef0a10671c9566ef23f329fb1f4172", "fullName": "TestCases.BaccaratGamePlay.BGP_BetAllocationLogic.test_TEST-33161#test_33161", "labels": [{"name": "feature", "value": "Bet Allocation Logic"}, {"name": "story", "value": "TEST-33161: Bet Allocation Logic"}, {"name": "parentSuite", "value": "TestCases.BaccaratGamePlay.BGP_BetAllocationLogic"}, {"name": "suite", "value": "test_TEST-33161"}, {"name": "host", "value": "CC-LT001020"}, {"name": "thread", "value": "1912-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.BaccaratGamePlay.BGP_BetAllocationLogic.test_TEST-33161"}], "titlePath": ["TestCases", "BaccaratGamePlay", "BGP_BetAllocationLogic", "test_TEST-33161.py"]}