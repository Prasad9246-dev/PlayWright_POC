{"name": "TEST-33163 To verify the ownership of chips when player places more than one stack on a single seat", "status": "broken", "statusDetails": {"message": "zipfile.BadZipFile: File is not a zip file", "trace": "setup = <Page url='https://172.41.46.23:790/tabledashboard/2025-09-05/override'>, request = <FixtureRequest for <Function test_33163>>\n\n    @allure.feature(\"Bet Allocation Logic\")\n    @allure.story(\"TEST-33163: Bet Allocation Logic\")\n    @allure.title(\"TEST-33163 To verify the ownership of chips when player places more than one stack on a single seat\")\n    def test_33163(setup, request):\n        status = \"Pass\"\n        remarks = \"\"\n        tbd = TableExecutionTemplate(setup, \"TEST-33163\",\"BGP_BetAllocationLogic\")\n        request.node.tbd = tbd\n        try:\n            table_ip = tbd.config[\"tableIP\"]\n            chips_df = tbd.chips_df\n            #Player clocked-in\n>           tbd.table_actions.clock_in_player(\"Players_TAB\",\"1\", \"6001\")\n\nTestCases\\BaccaratGamePlay\\BGP_BetAllocationLogic\\test_TEST-33163.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nUtilites\\TableUtils\\TableActions.py:291: in clock_in_player\n    self.ui_utils.fill_element(self.player_tab.Enter_Player_ID, player_id)\nUtilites\\UIUtils.py:29: in fill_element\n    element_selector.wait_for(state=\"visible\", timeout=timeout)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:17956: in wait_for\n    self._sync(self._impl_obj.wait_for(timeout=timeout, state=state))\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_locator.py:692: in wait_for\n    await self._frame.wait_for_selector(\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_frame.py:369: in wait_for_selector\n    await self._channel.send(\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:69: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <playwright._impl._connection.Connection object at 0x00000231DE8F7B60>\ncb = <function Channel.send.<locals>.<lambda> at 0x00000231DEDEBA60>, is_internal = False, title = None\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(\n            task, \"__pw_stack__\", None\n        ) or inspect.stack(0)\n    \n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Locator.wait_for: Timeout 5000ms exceeded.\nE           Call log:\nE             - waiting for get_by_placeholder(\"Enter Player ID\") to be visible\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\playwright\\_impl\\_connection.py:558: TimeoutError\n\nDuring handling of the above exception, another exception occurred:\n\nsetup = <Page url='https://172.41.46.23:790/tabledashboard/2025-09-05/override'>, request = <FixtureRequest for <Function test_33163>>\n\n    @allure.feature(\"Bet Allocation Logic\")\n    @allure.story(\"TEST-33163: Bet Allocation Logic\")\n    @allure.title(\"TEST-33163 To verify the ownership of chips when player places more than one stack on a single seat\")\n    def test_33163(setup, request):\n        status = \"Pass\"\n        remarks = \"\"\n        tbd = TableExecutionTemplate(setup, \"TEST-33163\",\"BGP_BetAllocationLogic\")\n        request.node.tbd = tbd\n        try:\n            table_ip = tbd.config[\"tableIP\"]\n            chips_df = tbd.chips_df\n            #Player clocked-in\n            tbd.table_actions.clock_in_player(\"Players_TAB\",\"1\", \"6001\")\n            # Process buy-ins\n            tbd.logger_utils.log(\"Processing buy-ins.\")\n            buyin_result = tbd.buyin_processor.process_buyins(table_ip, tbd.buyin_data, chips_df)\n    \n            # Process wagers\n            tbd.logger_utils.log(\"Processing wagers.\")\n            wager_result = tbd.wager_processor.process_wagers(table_ip, buyin_result, tbd.wager_data)\n    \n            # Draw cards and press shoe button\n            tbd.logger_utils.log(\"Drawing cards and pressing shoe.\")\n            tbd.card_processor.draw_cards_and_shoe_press(tbd.card_data, table_ip)\n    \n            # Process payouts\n            tbd.logger_utils.log(\"Processing payouts.\")\n            tbd.payout_processor.process_payouts(table_ip, tbd.payout_data, chips_df)\n            time.sleep(5)\n    \n        except Exception as e:\n            status = \"Fail\"\n            remarks = str(e)\n            tbd.logger_utils.log(f\"Exception occurred: {remarks}\")\n            try:\n                tbd.void_game()\n            except Exception as ve:\n                print(f\"Failed to void hand in test: {ve}\")\n                tbd.logger_utils.log(f\"Failed to void hand in test: {ve}\")\n            raise\n        finally:\n            config = tbd.config\n            BUILD_VERSION = config.get(\"build_version\")\n            FEATURE_NAME = config.get(\"feature_name\")\n            report_writer = TestReportWriter(BUILD_VERSION, FEATURE_NAME)\n            report_writer.add_result(\n                test_set_name=FEATURE_NAME,\n                test_case_id=\"TEST-0608\",\n                status=status,\n                remarks=remarks,\n                time_str=datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n            )\n>           report_writer.write_report()\n\nTestCases\\BaccaratGamePlay\\BGP_BetAllocationLogic\\test_TEST-33163.py:59: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nUtilites\\ExcelRead\\TestReportWriter.py:41: in write_report\n    wb = load_workbook(self.file_path)\n         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\openpyxl\\reader\\excel.py:346: in load_workbook\n    reader = ExcelReader(filename, read_only, keep_vba,\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\openpyxl\\reader\\excel.py:123: in __init__\n    self.archive = _validate_archive(fn)\n                   ^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\openpyxl\\reader\\excel.py:95: in _validate_archive\n    archive = ZipFile(filename, 'r')\n              ^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\zipfile\\__init__.py:1385: in __init__\n    self._RealGetContents()\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <zipfile.ZipFile [closed]>\n\n    def _RealGetContents(self):\n        \"\"\"Read in the table of contents for the ZIP file.\"\"\"\n        fp = self.fp\n        try:\n            endrec = _EndRecData(fp)\n        except OSError:\n            raise BadZipFile(\"File is not a zip file\")\n        if not endrec:\n>           raise BadZipFile(\"File is not a zip file\")\nE           zipfile.BadZipFile: File is not a zip file\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\zipfile\\__init__.py:1452: BadZipFile"}, "start": 1757065651158, "stop": 1757065729382, "uuid": "d8eb007a-2f08-4d10-af0a-f02e522374eb", "historyId": "53b580944f49a78e833b34249ddd5a25", "testCaseId": "53b580944f49a78e833b34249ddd5a25", "fullName": "TestCases.BaccaratGamePlay.BGP_BetAllocationLogic.test_TEST-33163#test_33163", "labels": [{"name": "feature", "value": "Bet Allocation Logic"}, {"name": "story", "value": "TEST-33163: Bet Allocation Logic"}, {"name": "parentSuite", "value": "TestCases.BaccaratGamePlay.BGP_BetAllocationLogic"}, {"name": "suite", "value": "test_TEST-33163"}, {"name": "host", "value": "CC-LT001020"}, {"name": "thread", "value": "25044-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.BaccaratGamePlay.BGP_BetAllocationLogic.test_TEST-33163"}], "titlePath": ["TestCases", "BaccaratGamePlay", "BGP_BetAllocationLogic", "test_TEST-33163.py"]}